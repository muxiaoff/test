package ${config.prePackageName}.${config.moduleName}.dto.arg;

<% for(import in config.insertImports!){ %>
import ${import};
<% } %>
<% for(import in tableInfo.ImportPackages!){ %>
import ${import};
<% } %>
import lombok.Getter;
import lombok.Setter;
import io.swagger.annotations.ApiModel;
import java.time.LocalDateTime;
import com.fasterxml.jackson.annotation.JsonFormat;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.springframework.beans.BeanUtils;
import ${config.prePackageName}.${config.moduleName}.entity.${config.enBigName};
/**
 * ${config.chName}Insert
 * @author ${config.author}
 * @Date ${tool.currentTime()}
 */
@Getter
@Setter
@JsonIgnoreProperties(ignoreUnknown = true)
@ApiModel(value = "${config.enBigName}Insert")
public class ${config.enBigName}Insert {

    private static final long serialVersionUID = 1L;

<% for(field in tableInfo.fields!){ %>
    <% if (fieldUtil.getIsNotBaseField(tool.toCamelCase(field.name))) { %>
    /** ${field.comment} */
    @ApiModelProperty(value = "${field.comment}")
    <% if (tool.equals("Date", field.columnType.type + "")) { %>
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    <% } %>
    <% if (field.isNullable) { %>
            <% if (tool.equals("Date", field.columnType.type + "")) { %>
    @NotNull(message = "${field.comment}不能为空")
            <% } %>
            <% if (tool.equals("String", field.columnType.type + "")) { %>
    @NotBlank(message = "${field.comment}不能为空")
            <% } %>
        <% } %>
    <% if (tool.equals("String", field.columnType.type + "") && strKit.notBlank(field.maxLength)) { %>
    @Length(max = ${field.maxLength}, message = "${field.comment}长度不能大于${field.maxLength}")
    <% } %>
    private <% if (tool.equals("Date", field.columnType.type + "")) { %>LocalDateTime<% } %><% if (field.columnType.type == "Integer") { %>int<% } %><% if (field.columnType.type == "Float") { %>float<% } %><% if (field.columnType.type != "Date" && field.columnType.type != "Integer" && field.columnType.type != "Float") { %>${field.columnType.type}<% } %> ${tool.firstLetterToLower(tool.toCamelCase(field.name))}<% if (field.columnType.type == "String") { %> = ""<% } %>;
    <% } %>
<% } %>

    public ${config.enBigName} to${config.enBigName}() {
        ${config.enBigName} ${config.enName} = new ${config.enBigName}();
        BeanUtils.copyProperties(this, ${config.enName});
        return ${config.enName};
    }

}
